////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Draupnir/TLSPolicy.cpp
//
// summary:	Declares the TLS policy class
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TLSPolicy.h"

namespace Draupnir
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<std::string> TLSPolicy::allowed_ciphers() const
	{
		return { "ChaCha20Poly1305" };
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<std::string> TLSPolicy::allowed_macs() const
	{
		return { "AEAD" };
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<std::string> TLSPolicy::allowed_key_exchange_methods() const
	{
		return { "CECPQ1" };
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<std::string> TLSPolicy::allowed_signature_hashes() const
	{
		return { "SHA-512" };
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<std::string> TLSPolicy::allowed_signature_methods() const
	{
		return { "RSA" };
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	bool TLSPolicy::acceptable_protocol_version(Botan::TLS::Protocol_Version version) const
	{
		using Botan::TLS::Protocol_Version;
		return Protocol_Version(Protocol_Version::TLS_V12) == version;
	}
} // namespace Draupnir
